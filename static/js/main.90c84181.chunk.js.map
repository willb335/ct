{"version":3,"sources":["CT.tsx","Scale.tsx","ScaleTooltip.tsx","CTTooltip.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RotatedComposableMap","styled","ComposableMap","CT","setCurrentTown","data","colorScale","id","data-tip","projection","projectionConfig","scale","viewBox","xmlns","geography","towns","features","geographies","map","geo","cur","find","town","properties","toUpperCase","key","rsmKey","onMouseEnter","onMouseLeave","fill","parseFloat","replace","style","default","outline","hover","pressed","tabIndex","range","reverse","ScaleContainer","div","props","size","length","StyledScale","Scale","setCurrentScale","window","innerWidth","i","ScaleTooltip","townFills","currentScale","filter","name","ToolTipContainer","CTTooltip","currentTown","formatTown","paddingBottom","Container","App","useState","setData","setTownFills","useEffect","csv","process","then","filtered","d","scaleQuantile","domain","undefined","fillsArray","string","toLowerCase","split","s","charAt","substring","join","data-for","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.90c84181.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\nimport { DSVRowString } from 'd3-dsv';\nimport styled from 'styled-components';\n\nimport towns from './ct.geo.json';\n\ninterface CTProps {\n  setCurrentTown: Function;\n  data: DSVRowString[];\n  colorScale: Function;\n}\n\nconst RotatedComposableMap = styled(ComposableMap)`\n  transform: rotate(11deg);\n`;\n\nexport const CT: FunctionComponent<CTProps> = ({\n  setCurrentTown,\n  data,\n  colorScale,\n}) => {\n  return (\n    <RotatedComposableMap\n      id=\"ct\"\n      data-tip=\"\"\n      projection=\"geoAlbersUsa\"\n      projectionConfig={{ scale: 820 }}\n      viewBox=\"634 219 36 20\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <Geographies geography={towns.features}>\n        {({ geographies }) =>\n          geographies.map((geo) => {\n            const cur = data.find(\n              (town) =>\n                town['Municipality'] === geo.properties.town.toUpperCase()\n            );\n\n            return (\n              <Geography\n                key={geo.rsmKey}\n                onMouseEnter={() => cur && setCurrentTown(cur)}\n                onMouseLeave={() => setCurrentTown(null)}\n                geography={geo}\n                fill={\n                  cur && cur['Tax Per Capita']\n                    ? colorScale(\n                        parseFloat(cur['Tax Per Capita'].replace(/,/g, ''))\n                      )\n                    : '#EEE'\n                }\n                style={{\n                  default: { outline: 'none' },\n                  hover: { outline: 'none', fill: 'gainsboro' },\n                  pressed: { outline: 'none' },\n                }}\n                tabIndex={-1}\n              />\n            );\n          })\n        }\n      </Geographies>\n    </RotatedComposableMap>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport styled from 'styled-components';\n\ninterface ScaleProps {\n  setCurrentScale: Function;\n}\n\nconst range = [\n  '#BF1E06',\n  '#DF3F1A',\n  '#F16334',\n  '#F28750',\n  '#F3A66C',\n  '#F5C187',\n  '#F6D6A2',\n  '#F9E7BD',\n  '#FBF4D8',\n].reverse();\n\nconst ScaleContainer = styled.div<{ size: number }>`\n  position: relative;\n  display: block;\n  background: #dcdcdc;\n  height: ${(props) => `${props.size / range.length - 1}px`};\n`;\n\nconst StyledScale = styled.div<{ size: number; fill: string }>`\n  display: inline-block;\n  width: ${(props) => `${(props.size / range.length - 1) * 0.9}px`};\n  height: ${(props) => `${props.size / range.length - 1}px`};\n  background-color: ${(props) => props.fill};\n`;\n\nexport const Scale: FunctionComponent<ScaleProps> = ({ setCurrentScale }) => {\n  return (\n    <ScaleContainer data-tip=\"\" id=\"scale\" size={window.innerWidth}>\n      {range.map((fill, i) => {\n        return (\n          <StyledScale\n            fill={fill}\n            size={window.innerWidth}\n            key={fill + i}\n            onMouseEnter={() => setCurrentScale(fill)}\n            onMouseLeave={() => setCurrentScale(null)}\n          ></StyledScale>\n        );\n      })}\n    </ScaleContainer>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { TownFill } from './App';\n\ninterface ScaleTooltipProps {\n  townFills: TownFill[];\n  currentScale: string;\n}\n\nexport const ScaleTooltip: FunctionComponent<ScaleTooltipProps> = ({\n  townFills,\n  currentScale,\n}) => {\n  return (\n    <div>\n      {townFills\n        .filter((town) => town.fill === currentScale)\n        .map((town) => (\n          <div key={town.name}>{town.name}</div>\n        ))}\n    </div>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport styled from 'styled-components';\n\nimport { CurrentTownData } from './App';\n\ninterface CTTooltipProps {\n  currentTown: CurrentTownData;\n  formatTown: Function;\n}\n\nconst ToolTipContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n  height: 100%;\n  line-height: 0;\n`;\n\nexport const CTTooltip: FunctionComponent<CTTooltipProps> = ({\n  currentTown,\n  formatTown,\n}) => {\n  return (\n    <ToolTipContainer>\n      <h4>{currentTown && formatTown(currentTown['Municipality'])}</h4>\n      <p>Tax Per Capita: ${currentTown && currentTown['Tax Per Capita']}</p>\n      <p>\n        Number of Returns: {currentTown && currentTown['Number of Returns']}\n      </p>\n      <p style={{ paddingBottom: 7 }}>\n        Total Taxes Paid: ${currentTown && currentTown['CT Income Tax']}\n      </p>\n    </ToolTipContainer>\n  );\n};\n","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport ReactTooltip from 'react-tooltip';\nimport { csv } from 'd3-fetch';\nimport { DSVRowArray, DSVRowString } from 'd3-dsv';\nimport { scaleQuantile } from 'd3-scale';\n\nimport { CT } from './CT';\nimport { Scale } from './Scale';\nimport { ScaleTooltip } from './ScaleTooltip';\nimport { CTTooltip } from './CTTooltip';\n\nexport interface CurrentTownData {\n  [key: string]: string;\n}\n\nexport interface TownFill {\n  name: string;\n  fill: string;\n}\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const App: FunctionComponent = () => {\n  const [currentTown, setCurrentTown] = useState<CurrentTownData | null>(null);\n  const [currentScale, setCurrentScale] = useState<string | null>(null);\n  const [data, setData] = useState<DSVRowString[]>([]);\n  const [townFills, setTownFills] = useState<TownFill[]>([]);\n\n  useEffect(() => {\n    // https://data.ct.gov/Tax-and-Revenue/Personal-Income-Tax-By-Town/pvqv-e235\n    csv(`${process.env.PUBLIC_URL}/Personal_Income_Tax_By_Town.csv`).then(\n      (towns: DSVRowArray<string>): void => {\n        const filtered: DSVRowString[] = towns?.filter(\n          (d) => d['Tax Year'] === '2017'\n        );\n\n        setData(filtered);\n      }\n    );\n  }, []);\n\n  const colorScale = scaleQuantile<string>()\n    .domain(\n      data\n        .filter((town) => town['Tax Per Capita'] !== undefined)\n        .map((town) => {\n          if (town['Tax Per Capita'] === undefined) {\n            return undefined;\n          }\n          return parseFloat(town['Tax Per Capita'].replace(/,/g, ''));\n        })\n    )\n    .range([\n      '#BF1E06',\n      '#DF3F1A',\n      '#F16334',\n      '#F28750',\n      '#F3A66C',\n      '#F5C187',\n      '#F6D6A2',\n      '#F9E7BD',\n      '#FBF4D8',\n    ]);\n\n  useEffect(() => {\n    const fillsArray = data\n      .filter((town): boolean => town['Tax Per Capita'] !== undefined)\n      .map(\n        (town): TownFill => {\n          return {\n            name: town['Municipality'] ? formatTown(town['Municipality']) : '',\n            fill: town['Tax Per Capita']\n              ? colorScale(parseFloat(town['Tax Per Capita'].replace(/,/g, '')))\n              : '#EEE',\n          };\n        }\n      );\n\n    setTownFills(fillsArray);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  const formatTown = (string: string): string => {\n    const lowerCased = string.toLowerCase();\n    return lowerCased\n      .split(' ')\n      .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\n      .join(' ');\n  };\n\n  return (\n    <>\n      <Container>\n        <h3>2017 Connecticut Personal Income Tax by Town</h3>\n      </Container>\n      <CT data={data} colorScale={colorScale} setCurrentTown={setCurrentTown} />\n\n      {currentTown && (\n        <ReactTooltip data-for=\"ct\">\n          <CTTooltip currentTown={currentTown} formatTown={formatTown} />\n        </ReactTooltip>\n      )}\n\n      <Container>\n        {currentScale && (\n          <ReactTooltip data-for=\"scale\">\n            <ScaleTooltip townFills={townFills} currentScale={currentScale} />\n          </ReactTooltip>\n        )}\n        <Scale setCurrentScale={setCurrentScale} />\n      </Container>\n    </>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}